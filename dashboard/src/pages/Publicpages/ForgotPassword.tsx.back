// import TextField from '@material-ui/core/TextField';
import Button from '@material-ui/core/Button';
// import Grid from '@material-ui/core/Grid';
import Card from '@material-ui/core/Card';
import CardContent from '@material-ui/core/CardContent';
import Snackbar from '@material-ui/core/Snackbar';
import { makeStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import axios from 'axios';
import PropTypes from 'prop-types';
import React, { Component } from 'react';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogContent from '@material-ui/core/DialogContent';
import DialogContentText from '@material-ui/core/DialogContentText';
import DialogTitle from '@material-ui/core/DialogTitle';
import TextField from '@material-ui/core/TextField';
import ProgressHOC from '../../components/utils/Progressbar';
import { TfaPageHOC, SignDeviceDialogue } from '../../Login';
import Constants from '../../Constants';

import OrgSelect from '../Login/OrgSelect';
// STYLES
const useStyles = makeStyles((theme) => ({
  root: {
    // position: 'absolute',
    backgroundColor: 'white', // '#0b1728ff', //'#0b1728ff',
    width: '100%',
    height: '100%',
    margin: '0',
  },
  demo: {
    position: 'absolute',
    top: '35%',
    right: '50%',
    transform: 'translate(50%,-50%)',
  },
  card: {
    // contained: true,
    minWidth: 400,
    minHeight: 300,
    backgroundColor: 'white', // '#d0d3d4', // //rgba(1,1,35,1)
  },
  title: {
    marginBottom: 16,
    fontSize: 20,
    color: '#1A237E',
  },
  input: {
    color: 'teal',
  },
  button: {
    backgroundColor: '#1A237E',
    color: 'white',
  },
  particle: {
    height: '100%',
    marginRight: '10%',
  },
  textFieldInput: {
    borderRadius: 4,
    backgroundColor: theme.palette.common.white,
    border: '1px solid #ced4da',
    fontSize: 16,

    // padding: '10px 12px',
    width: 'calc(100% - 4px)',

    transition: theme.transitions.create(['border-color', 'box-shadow']),
    '&:focus': {
      borderColor: '#80bdff',
      boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',
    },
  },
  textFieldRoot: {
    // paddingRight: theme.spacing(2),
  },
  textFieldInputBig: {
    borderRadius: 4,
    // backgroundColor: theme.palette.common.white,
    border: '1px solid #ced4da',
    fontSize: 16,
    paddingLeft: theme.spacing(2),
    // marginLeft: theme.spacing(1),
    //    padding: '10px 100px',
    //     width: 'calc(100% - 4px)',
    transition: theme.transitions.create(['border-color', 'box-shadow']),
    '&:focus': {
      borderColor: '#80bdff',
      boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',
    },
  },
}));

export default function ForgetPassword(props) {
  const classes = useStyles();
  const [data, setdata] = React.useState({});
  const [open, setopen] = React.useState(false);
  const [orgs, setorgs] = React.useState([]);
  const [tfaRequired, settfaRequired] = React.useState(false);
  const [loader, setloader] = React.useState(false);
  const [token, settoken] = React.useState('');
  const [signDeviceDialogueState, setsignDeviceDialogueState] = React.useState(false);
  const [respDlgState, setrespDlgState] = React.useState(false);
  const [totpVal, settotpVal] = React.useState('');

  const changeSignDeviceDialogueState = () => {
    setsignDeviceDialogueState(!signDeviceDialogueState);
  };

  const changeRespDlgState = () => {
    setrespDlgState(!respDlgState);
  };

  const handleChange = (event) => {
    setdata({ ...data, [event.target.name]: event.target.value });
  };

  const getTotpVal = (event) => {
    settotpVal(event.target.value);
  };

  const handleSubmit = (orgID) => (event) => {
    setloader(true);
    const sign = data;
    sign.orgID = orgID || '';
    setorgs([]);
    event.preventDefault();

    axios
      .post(`${Constants.TRASA_HOSTNAME}/api/v1/users/forgotpass`, sign)
      .then((response) => {
        if (response.data.intent === 'tfaRequired') {
          settfaRequired(true);
          settoken(response.data.data[0]);
          setloader(false);
        } else if (response.data.status === 'selectOrg') {
          setorgs(response.data.data[0]);
          setloader(false);
        } else {
          setloader(false);
        }
      })
      .catch((error) => {
        setloader(false);
        console.log(error);
      });
  };

  const openTotpDlg = (event) => {
    event.preventDefault();
    setopen(true);
  };

  const sendTfa = (tfaMethod, totp) => {
    if (tfaMethod === 'U2FY') {
      changeSignDeviceDialogueState();
    } else {
      const req = {
        tfaMethod,
        totp: totpVal,
        token,
        intent: 'forgotPassword',
      };
      setloader(true);
      axios
        .post(`${Constants.TRASA_HOSTNAME}/api/v1/users/forgotpasstfa`, req)
        .then((response) => {
          if (response.data.status === 'success') {
            setorgs([]);
            setopen(false);
            setloader(false);

            changeRespDlgState();
          } else if (response.data.status === 'selectOrg') {
            setorgs(response.data.data[0]);
          } else {
            settfaRequired(true);
            setopen(false);
            setloader(false);
          }
        })

        .catch((error) => {
          setloader(false);
          console.log(error);
        });
    }
  };

  return (
    <div>
      {/* <Part /> */}

      <div className={classes.root}>
        <div className={classes.demo}>
          {tfaRequired ? (
            <TfaPageHOC
              sendTfa={sendTfa}
              loading={loader}
              openTotpDlg={openTotpDlg}
              tfaFailed={tfaFailed}
              tfaFailedReason={tfaFailedReason}
            />
          ) : (
            <Card className={classes.card}>
              <CardContent>
                <Typography className={classes.title}>Enter your email. </Typography>
                <br />

                <form onSubmit={handleSubmit('')}>
                  <div className={classes.aligner}>
                    <TextField
                      fullWidth
                      label="Your Email"
                      onChange={handleChange}
                      name="email"
                      value={data.email}
                      InputProps={{ className: classes.input }}
                    />
                    <br />
                    <br />
                    <br />
                    <br />
                  </div>

                  <Button variant="contained" className={classes.button} type="submit">
                    Reset Password
                  </Button>
                  <br />
                  <br />
                </form>
                {loader && <ProgressHOC />}
              </CardContent>
            </Card>
          )}

          <OrgSelect orgs={orgs} submitLoginRequest={handleSubmit} />
        </div>
      </div>
      <Dialog open={open} onClose={handleClose} aria-labelledby="form-dialog-title">
        <DialogTitle id="form-dialog-title">Enter 6 digit code</DialogTitle>
        <DialogContent>
          <DialogContentText>
            <form
              onSubmit={() => {
                sendTfa('totp', '');
              }}
            >
              <TextField
                fullWidth
                autoFocus
                // label="App Name"
                onChange={getTotpVal}
                name="totpVal"
                maxLength={6}
                InputProps={{
                  disableUnderline: true,
                  classes: {
                    root: classes.textFieldRoot,
                    input: classes.textFieldInputBig,
                  },
                }}
                InputLabelProps={{
                  shrink: true,
                  className: classes.textFieldFormLabel,
                }}
              />
            </form>
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button
            size="small"
            variant="contained"
            color="primary"
            onClick={() => {
              sendTfa('totp', '');
            }}
          >
            Submit
          </Button>
          <Button size="small" onClick={handleClose} color="primary">
            Cancel
          </Button>
        </DialogActions>
      </Dialog>

      <SignDeviceDialogue
        open={signDeviceDialogueState}
        close={changeSignDeviceDialogueState}
        token={token}
        intent="forgotPassword"
        setResponseText={setResponseText}
      />
      <ResponseDlg
        respDlgState={respDlgState}
        changeRespDlgState={changeRespDlgState}
        msg={this.state.msg}
      />
    </div>
  );
}

class ForgotPassword1 extends Component {
  setResponseText = (val) => {
    this.changeSignDeviceDialogueState();

    this.setState({ msg: val, orgs: [] });
    this.changeRespDlgState();
  };

  render() {
    const { classes } = this.props;

    const { data, open } = this.state;
  }
}

const ResponseDlg = (props) => {
  return (
    <div>
      <Dialog
        open={props.respDlgState}
        onClose={props.changeRespDlgState}
        aria-labelledby="form-dialog-title"
      >
        <DialogTitle id="form-dialog-title">{props.msg}</DialogTitle>
        <DialogContent>
          <DialogContentText> </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button size="small" onClick={props.changeRespDlgState} color="primary">
            close
          </Button>
        </DialogActions>
      </Dialog>
    </div>
  );
};
